
Exporting Simulation Results
============================

.. meta::
   :description: How to export simulation results from the BPTK-Py business simulation framework.
   :keywords: system dynamics, systemdynamics, xmile, bptk, bptk-py, python, business simulation


*Exporting Scenario Data For Further Analysis In High-End Business Intelligence Tools*

Jupyter Notebooks are a perfect environment to create System Dynamics
and Agent-based Models and analyse them in-depth â€“ at least if you are a
data scientist or computational modeler.

But what if you want to present your results to people who are not quite
so tech savvy or don't have all the necessary tools installed?

We face such situations quite often with our clients and at one point we
asked ourselves:

-  Why not use a high-end business intelligence tool such as Microsofts
   Power BI Desktop to create a polished dasboards?
-  Why not share the reports using the Power BI service? After all,
   Power BI was created to create such data intelligence apps!
-  Why not use Jupyter notebooks to create sophisticated simulation
   models (which is what the Jupyter+Python Ecosystem is good at) and
   then use Power BI for the fancy UI (which is what Power BI is good
   at)

To achieve this, all we really need BPTK-Py to do is to export the data
generated by the simulation for those scenarios that are relevant for
the report.

We can then import that data into Power BI and build the report using
Power BI's WYSIWIG tools.

To achieve this, we've added a new method called ``export_scenarios`` to
BPTK-Py which writes the data for a set of scenarios and interactive
settings to an Excel file.

Here is what the method looks like for the customer acquisition model,
which is one of the models we've provided with the tutorial:

.. code:: python

    bptk.export_scenarios(
        scenario_manager="smCustomerAcquisition",
        equations=["customers","profit"],
        filename='/path/to/exported/data/customer_aquisition.xlsx',
        interactive_scenario="interactiveScenario",
        interactive_equations=["customers","profit"],
        interactive_settings= {
            "advertisingSuccessPct":(0,0.2,0.01),
            "referralFreeMonths":(0,40,10),
            "referralProgramAdoptionPct":(0,12,1),
            "referrals":(0,12,1)
        }
    ) 

And here is a Power BI report we've created from the data, you can
access it
`directly <https://app.powerbi.com/view?r=eyJrIjoiNDFlMTA2ZGItYmFkOC00Mjg3LTljODYtYzRkYzY2YmFmM2E4IiwidCI6ImZjNWRmZDc1LTQ1NzktNGQ3MC05YTE3LTk0MmQ0OWMwMTc2ZiIsImMiOjl9>`__
on PowerBI:

.. raw:: html


            <iframe
                width="700"
                height="450"
                src="https://app.powerbi.com/view?r=eyJrIjoiNDFlMTA2ZGItYmFkOC00Mjg3LTljODYtYzRkYzY2YmFmM2E4IiwidCI6ImZjNWRmZDc1LTQ1NzktNGQ3MC05YTE3LTk0MmQ0OWMwMTc2ZiIsImMiOjl9"
                frameborder="0"
                allowfullscreen
            ></iframe>
            



A Closer Look At BPTK-Py's Export Function
------------------------------------------

This section takes a closer look at how the export function is
implemented, just in case you would like to add some features or export
the data in some other format.

.. code:: ipython3

    ## Load the BPTK Package
    from BPTK_Py.bptk import bptk 
    
    bptk = bptk()

The first thing to remember is how scenario data is stored in a
``pandas`` dataframe:

.. code:: ipython3

    df=bptk.plot_scenarios(
        scenario_managers=["smCustomerAcquisition"],
        scenarios=["referSomeonePlease"],
        equations=["customers","profit"],
        return_df=True
    )

.. code:: ipython3

    df[1:10]




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>customers</th>
          <th>profit</th>
        </tr>
        <tr>
          <th>t</th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>800.000000</td>
          <td>-1.020000e+06</td>
        </tr>
        <tr>
          <th>2</th>
          <td>1623.890133</td>
          <td>-1.036240e+06</td>
        </tr>
        <tr>
          <th>3</th>
          <td>2472.377134</td>
          <td>-1.048608e+06</td>
        </tr>
        <tr>
          <th>4</th>
          <td>3346.188234</td>
          <td>-1.056987e+06</td>
        </tr>
        <tr>
          <th>5</th>
          <td>4246.071738</td>
          <td>-1.061259e+06</td>
        </tr>
        <tr>
          <th>6</th>
          <td>5172.797601</td>
          <td>-1.061302e+06</td>
        </tr>
        <tr>
          <th>7</th>
          <td>6127.158034</td>
          <td>-1.056989e+06</td>
        </tr>
        <tr>
          <th>8</th>
          <td>7109.968110</td>
          <td>-1.048189e+06</td>
        </tr>
        <tr>
          <th>9</th>
          <td>8122.066399</td>
          <td>-1.034770e+06</td>
        </tr>
      </tbody>
    </table>
    </div>



Notice that each indicator (aka equation, ``customers`` and ``profit``
in this example) has its own column and that the time dimension forms
the index of the dataframe. Also notice that the name of the scenario
``referSomeonePlease`` is not stored in the dataframe itself.

Now when it comes to displaying the data in an interactive report (like
the one above) we would like to be able to switch between scenarios. So
one thing we need to do is to add a column containing a name of the
scenario to the dataframe. We also would like one large dataframe
containing the data from all the scenarios.

.. code:: ipython3

    # get all the scenarios from the smCustomerAquisition scenario manager
    scenario_manager="smCustomerAcquisition"
    scenarios = bptk.get_scenario_names([scenario_manager])

.. code:: ipython3

    scenarios




.. parsed-literal::

    ['base',
     'serviceFlop',
     'rethinkAdvertising',
     'referSomeonePlease',
     'hereWeGo',
     'boomButBust']



.. code:: ipython3

    # List of equations we want to generate data for
    equations=["customers","profit"]

.. code:: ipython3

    # collect the scenarios into a list
    scenario_dfs = []
    for scenario in scenarios:
        # first create a dataframe for each scenario
        df = bptk.plot_scenarios(
            scenario_managers=[scenario_manager],
            scenarios=[scenario],
            equations=equations,
            return_df=True)
        # add a colum which will contain the name of the scenario
        df["scenario"] = [scenario] * len(df.index)
        # create a new column which will contain the time step (which won't be a unique index anymore, as we are concatenating many scenarios)
        df["time"] = df.index
        scenario_dfs += [df]

.. code:: ipython3

    scenario_dfs[0:2]




.. parsed-literal::

    [       customers        profit scenario  time
     t                                            
     0       0.000000 -1.000000e+06     base     0
     1     800.000000 -1.010000e+06     base     1
     2    1599.893333 -1.016000e+06     base     2
     3    2399.680014 -1.018001e+06     base     3
     4    3199.360057 -1.016002e+06     base     4
     ..           ...           ...      ...   ...
     56  44636.126878  4.585242e+06     base    56
     57  45430.175394  4.798423e+06     base    57
     58  46224.118038  5.015574e+06     base    58
     59  47017.954822  5.236694e+06     base    59
     60  47811.685761  5.461784e+06     base    60
     
     [61 rows x 4 columns],        customers        profit     scenario  time
     t                                                
     0       0.000000 -1.000000e+06  serviceFlop     0
     1      80.000000 -1.020000e+06  serviceFlop     1
     2     162.398901 -1.039624e+06  serviceFlop     2
     3     247.268571 -1.058861e+06  serviceFlop     3
     4     334.683026 -1.077699e+06  serviceFlop     4
     ..           ...           ...          ...   ...
     56  11276.933787 -1.053447e+06  serviceFlop    56
     57  11694.455595 -1.020439e+06  serviceFlop    57
     58  12124.449535 -9.854686e+05  serviceFlop    58
     59  12567.286351 -9.484763e+05  serviceFlop    59
     60  13023.347694 -9.094022e+05  serviceFlop    60
     
     [61 rows x 4 columns]]



.. code:: ipython3

    import pandas as pd

.. code:: ipython3

    # concatenate the data into one table using pandas concat function
    scenarios_tab = pd.concat(scenario_dfs, ignore_index=True, sort=False)

.. code:: ipython3

    scenarios_tab




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>customers</th>
          <th>profit</th>
          <th>scenario</th>
          <th>time</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.000000e+00</td>
          <td>-1.000000e+06</td>
          <td>base</td>
          <td>0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>8.000000e+02</td>
          <td>-1.010000e+06</td>
          <td>base</td>
          <td>1</td>
        </tr>
        <tr>
          <th>2</th>
          <td>1.599893e+03</td>
          <td>-1.016000e+06</td>
          <td>base</td>
          <td>2</td>
        </tr>
        <tr>
          <th>3</th>
          <td>2.399680e+03</td>
          <td>-1.018001e+06</td>
          <td>base</td>
          <td>3</td>
        </tr>
        <tr>
          <th>4</th>
          <td>3.199360e+03</td>
          <td>-1.016002e+06</td>
          <td>base</td>
          <td>4</td>
        </tr>
        <tr>
          <th>5</th>
          <td>3.998933e+03</td>
          <td>-1.010005e+06</td>
          <td>base</td>
          <td>5</td>
        </tr>
        <tr>
          <th>6</th>
          <td>4.798400e+03</td>
          <td>-1.000011e+06</td>
          <td>base</td>
          <td>6</td>
        </tr>
        <tr>
          <th>7</th>
          <td>5.597760e+03</td>
          <td>-9.860187e+05</td>
          <td>base</td>
          <td>7</td>
        </tr>
        <tr>
          <th>8</th>
          <td>6.397014e+03</td>
          <td>-9.680299e+05</td>
          <td>base</td>
          <td>8</td>
        </tr>
        <tr>
          <th>9</th>
          <td>7.196161e+03</td>
          <td>-9.460448e+05</td>
          <td>base</td>
          <td>9</td>
        </tr>
        <tr>
          <th>10</th>
          <td>7.995202e+03</td>
          <td>-9.200640e+05</td>
          <td>base</td>
          <td>10</td>
        </tr>
        <tr>
          <th>11</th>
          <td>8.794136e+03</td>
          <td>-8.900880e+05</td>
          <td>base</td>
          <td>11</td>
        </tr>
        <tr>
          <th>12</th>
          <td>9.592963e+03</td>
          <td>-8.561173e+05</td>
          <td>base</td>
          <td>12</td>
        </tr>
        <tr>
          <th>13</th>
          <td>1.039168e+04</td>
          <td>-8.181525e+05</td>
          <td>base</td>
          <td>13</td>
        </tr>
        <tr>
          <th>14</th>
          <td>1.119030e+04</td>
          <td>-7.761941e+05</td>
          <td>base</td>
          <td>14</td>
        </tr>
        <tr>
          <th>15</th>
          <td>1.198881e+04</td>
          <td>-7.302426e+05</td>
          <td>base</td>
          <td>15</td>
        </tr>
        <tr>
          <th>16</th>
          <td>1.278721e+04</td>
          <td>-6.802985e+05</td>
          <td>base</td>
          <td>16</td>
        </tr>
        <tr>
          <th>17</th>
          <td>1.358550e+04</td>
          <td>-6.263625e+05</td>
          <td>base</td>
          <td>17</td>
        </tr>
        <tr>
          <th>18</th>
          <td>1.438369e+04</td>
          <td>-5.684350e+05</td>
          <td>base</td>
          <td>18</td>
        </tr>
        <tr>
          <th>19</th>
          <td>1.518177e+04</td>
          <td>-5.065165e+05</td>
          <td>base</td>
          <td>19</td>
        </tr>
        <tr>
          <th>20</th>
          <td>1.597975e+04</td>
          <td>-4.406077e+05</td>
          <td>base</td>
          <td>20</td>
        </tr>
        <tr>
          <th>21</th>
          <td>1.677762e+04</td>
          <td>-3.707089e+05</td>
          <td>base</td>
          <td>21</td>
        </tr>
        <tr>
          <th>22</th>
          <td>1.757538e+04</td>
          <td>-2.968208e+05</td>
          <td>base</td>
          <td>22</td>
        </tr>
        <tr>
          <th>23</th>
          <td>1.837304e+04</td>
          <td>-2.189439e+05</td>
          <td>base</td>
          <td>23</td>
        </tr>
        <tr>
          <th>24</th>
          <td>1.917059e+04</td>
          <td>-1.370787e+05</td>
          <td>base</td>
          <td>24</td>
        </tr>
        <tr>
          <th>25</th>
          <td>1.996803e+04</td>
          <td>-5.122577e+04</td>
          <td>base</td>
          <td>25</td>
        </tr>
        <tr>
          <th>26</th>
          <td>2.076537e+04</td>
          <td>3.861440e+04</td>
          <td>base</td>
          <td>26</td>
        </tr>
        <tr>
          <th>27</th>
          <td>2.156260e+04</td>
          <td>1.324412e+05</td>
          <td>base</td>
          <td>27</td>
        </tr>
        <tr>
          <th>28</th>
          <td>2.235973e+04</td>
          <td>2.302543e+05</td>
          <td>base</td>
          <td>28</td>
        </tr>
        <tr>
          <th>29</th>
          <td>2.315675e+04</td>
          <td>3.320529e+05</td>
          <td>base</td>
          <td>29</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>336</th>
          <td>3.982866e+06</td>
          <td>-1.789605e+07</td>
          <td>boomButBust</td>
          <td>31</td>
        </tr>
        <tr>
          <th>337</th>
          <td>4.384834e+06</td>
          <td>-1.005268e+07</td>
          <td>boomButBust</td>
          <td>32</td>
        </tr>
        <tr>
          <th>338</th>
          <td>4.739161e+06</td>
          <td>1.228133e+06</td>
          <td>boomButBust</td>
          <td>33</td>
        </tr>
        <tr>
          <th>339</th>
          <td>5.038095e+06</td>
          <td>1.594096e+07</td>
          <td>boomButBust</td>
          <td>34</td>
        </tr>
        <tr>
          <th>340</th>
          <td>5.280532e+06</td>
          <td>3.384218e+07</td>
          <td>boomButBust</td>
          <td>35</td>
        </tr>
        <tr>
          <th>341</th>
          <td>5.470586e+06</td>
          <td>5.452607e+07</td>
          <td>boomButBust</td>
          <td>36</td>
        </tr>
        <tr>
          <th>342</th>
          <td>5.615467e+06</td>
          <td>7.751470e+07</td>
          <td>boomButBust</td>
          <td>37</td>
        </tr>
        <tr>
          <th>343</th>
          <td>5.723485e+06</td>
          <td>1.023330e+08</td>
          <td>boomButBust</td>
          <td>38</td>
        </tr>
        <tr>
          <th>344</th>
          <td>5.802653e+06</td>
          <td>1.285565e+08</td>
          <td>boomButBust</td>
          <td>39</td>
        </tr>
        <tr>
          <th>345</th>
          <td>5.859936e+06</td>
          <td>1.558321e+08</td>
          <td>boomButBust</td>
          <td>40</td>
        </tr>
        <tr>
          <th>346</th>
          <td>5.900993e+06</td>
          <td>1.838806e+08</td>
          <td>boomButBust</td>
          <td>41</td>
        </tr>
        <tr>
          <th>347</th>
          <td>5.930218e+06</td>
          <td>2.124892e+08</td>
          <td>boomButBust</td>
          <td>42</td>
        </tr>
        <tr>
          <th>348</th>
          <td>5.950919e+06</td>
          <td>2.414996e+08</td>
          <td>boomButBust</td>
          <td>43</td>
        </tr>
        <tr>
          <th>349</th>
          <td>5.965529e+06</td>
          <td>2.707961e+08</td>
          <td>boomButBust</td>
          <td>44</td>
        </tr>
        <tr>
          <th>350</th>
          <td>5.975816e+06</td>
          <td>3.002952e+08</td>
          <td>boomButBust</td>
          <td>45</td>
        </tr>
        <tr>
          <th>351</th>
          <td>5.983045e+06</td>
          <td>3.299375e+08</td>
          <td>boomButBust</td>
          <td>46</td>
        </tr>
        <tr>
          <th>352</th>
          <td>5.988119e+06</td>
          <td>3.596806e+08</td>
          <td>boomButBust</td>
          <td>47</td>
        </tr>
        <tr>
          <th>353</th>
          <td>5.991678e+06</td>
          <td>3.894945e+08</td>
          <td>boomButBust</td>
          <td>48</td>
        </tr>
        <tr>
          <th>354</th>
          <td>5.994172e+06</td>
          <td>4.193581e+08</td>
          <td>boomButBust</td>
          <td>49</td>
        </tr>
        <tr>
          <th>355</th>
          <td>5.995920e+06</td>
          <td>4.492565e+08</td>
          <td>boomButBust</td>
          <td>50</td>
        </tr>
        <tr>
          <th>356</th>
          <td>5.997143e+06</td>
          <td>4.791794e+08</td>
          <td>boomButBust</td>
          <td>51</td>
        </tr>
        <tr>
          <th>357</th>
          <td>5.998000e+06</td>
          <td>5.091195e+08</td>
          <td>boomButBust</td>
          <td>52</td>
        </tr>
        <tr>
          <th>358</th>
          <td>5.998600e+06</td>
          <td>5.390715e+08</td>
          <td>boomButBust</td>
          <td>53</td>
        </tr>
        <tr>
          <th>359</th>
          <td>5.999020e+06</td>
          <td>5.690319e+08</td>
          <td>boomButBust</td>
          <td>54</td>
        </tr>
        <tr>
          <th>360</th>
          <td>5.999314e+06</td>
          <td>5.989982e+08</td>
          <td>boomButBust</td>
          <td>55</td>
        </tr>
        <tr>
          <th>361</th>
          <td>5.999520e+06</td>
          <td>6.289686e+08</td>
          <td>boomButBust</td>
          <td>56</td>
        </tr>
        <tr>
          <th>362</th>
          <td>5.999664e+06</td>
          <td>6.589419e+08</td>
          <td>boomButBust</td>
          <td>57</td>
        </tr>
        <tr>
          <th>363</th>
          <td>5.999765e+06</td>
          <td>6.889172e+08</td>
          <td>boomButBust</td>
          <td>58</td>
        </tr>
        <tr>
          <th>364</th>
          <td>5.999835e+06</td>
          <td>7.188939e+08</td>
          <td>boomButBust</td>
          <td>59</td>
        </tr>
        <tr>
          <th>365</th>
          <td>5.999885e+06</td>
          <td>7.488716e+08</td>
          <td>boomButBust</td>
          <td>60</td>
        </tr>
      </tbody>
    </table>
    <p>366 rows Ã— 4 columns</p>
    </div>



We now have all the data for all the scenarios in one large dataframe.
Each row is indexed by the scenario it belongs to. The timestamp is only
unique within a given scenario.

Generating The Data For Scenario Comparison
-------------------------------------------

The data we have generated so far is a table with a column for each
indicator, indexed by scenario.

This is fine if you want to look at data scenario by scenario or plot
two different indicators for the same scenario.

But what if you want to compare the same indicator for different
scenarios?

In such a case, your data needs to be structured a little differently -
essential we then want a table with a column for each scenario, indexed
by the indicator.

To achieve this, we need to loop through the scenarios again:

.. code:: ipython3

    # create a new dataframe with a column for each scenario, indexed by time and indicator
    indicator_dfs = []
    for scenario_no, scenario in enumerate(scenarios):

        scenario_dfs=[]
        # loop through the equations
        for equation in equations:
            # add a column which will contain the name of the indicator
            df = bptk.plot_scenarios(
                scenario_managers=[scenario_manager],
                scenarios=[scenario],
                equations=[equation],
                return_df=True)
            df.rename(columns={equation:scenario},inplace=True)
            if scenario_no is len(scenarios)-1:
                df["indicator"] = [equation] * len(df.index)
                df["time"] = df.index
            scenario_dfs +=[df]

        # conacate the indicators for the scenario (i.e. along axis 0)
        indicators_scenario_tab = pd.concat(scenario_dfs, axis=0,ignore_index=True,sort=False)

        # create a new column which will contain the time step (which won't be a unique index anymore, as we are concatenating many scenarios)

        indicator_dfs += [indicators_scenario_tab]

    #concatenate all the scenario columns (i.e. along axis 1)
    indicators_tab=pd.concat(indicator_dfs,axis=1,sort=False)
    indicators_tab.index.name="id"

.. code:: ipython3

    indicators_tab[0:10]




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>base</th>
          <th>serviceFlop</th>
          <th>rethinkAdvertising</th>
          <th>referSomeonePlease</th>
          <th>hereWeGo</th>
          <th>boomButBust</th>
          <th>indicator</th>
          <th>time</th>
        </tr>
        <tr>
          <th>id</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>customers</td>
          <td>0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>800.000000</td>
          <td>80.000000</td>
          <td>80.000000</td>
          <td>800.000000</td>
          <td>800.000000</td>
          <td>800.000000</td>
          <td>customers</td>
          <td>1</td>
        </tr>
        <tr>
          <th>2</th>
          <td>1599.893333</td>
          <td>162.398901</td>
          <td>183.998613</td>
          <td>1623.890133</td>
          <td>1839.861333</td>
          <td>1839.861333</td>
          <td>customers</td>
          <td>2</td>
        </tr>
        <tr>
          <th>3</th>
          <td>2399.680014</td>
          <td>247.268571</td>
          <td>319.194051</td>
          <td>2472.377134</td>
          <td>3191.405164</td>
          <td>3191.405164</td>
          <td>customers</td>
          <td>3</td>
        </tr>
        <tr>
          <th>4</th>
          <td>3199.360057</td>
          <td>334.683026</td>
          <td>494.942916</td>
          <td>3346.188234</td>
          <td>4947.891939</td>
          <td>4947.891939</td>
          <td>customers</td>
          <td>4</td>
        </tr>
        <tr>
          <th>5</th>
          <td>3998.933476</td>
          <td>424.718494</td>
          <td>723.406944</td>
          <td>4246.071738</td>
          <td>7230.375720</td>
          <td>7230.375720</td>
          <td>customers</td>
          <td>5</td>
        </tr>
        <tr>
          <th>6</th>
          <td>4798.400284</td>
          <td>517.453484</td>
          <td>1020.393216</td>
          <td>5172.797601</td>
          <td>10195.910470</td>
          <td>10195.910470</td>
          <td>customers</td>
          <td>6</td>
        </tr>
        <tr>
          <th>7</th>
          <td>5597.760498</td>
          <td>612.968850</td>
          <td>1406.445515</td>
          <td>6127.158034</td>
          <td>14048.126326</td>
          <td>14048.126326</td>
          <td>customers</td>
          <td>7</td>
        </tr>
        <tr>
          <th>8</th>
          <td>6397.014130</td>
          <td>711.347864</td>
          <td>1908.261512</td>
          <td>7109.968110</td>
          <td>19050.823648</td>
          <td>19050.823648</td>
          <td>customers</td>
          <td>8</td>
        </tr>
        <tr>
          <th>9</th>
          <td>7196.161194</td>
          <td>812.676285</td>
          <td>2560.532449</td>
          <td>8122.066399</td>
          <td>25545.383938</td>
          <td>25545.383938</td>
          <td>customers</td>
          <td>9</td>
        </tr>
      </tbody>
    </table>
    </div>




Generating The Data For Interactive Dashboards
----------------------------------------------

In most cases creating an interactive report that just compares
predefined scenarios is quite enough. But sometimes you would like to
add a little dashboard to allow users to test different settings
themselves, like the "Forecast" page in the example above.

The easiest way to achive this in Power BI is to use so called "What If"
parameters to select a scenario from a set of pre-computed scenarios. We
need to pre-compute them because currently Power BI doesn't allow you to
query data live with different parameters.

In most cases there will be thousands of "interactive" scenarios you
need to pre-compute, so it is not feasible to enumerate them as a list.
Instead the idea is to start with a base "interactive" scenario and then
vary a set of parameters within a given range, much like in a Monte
Carlo simulation.

.. code:: ipython3

    # these are the scenarios initially defined
    bptk.list_scenarios(["smCustomerAcquisition"])


.. parsed-literal::

    
    *** smCustomerAcquisition ***
    	 base
    	 serviceFlop
    	 rethinkAdvertising
    	 referSomeonePlease
    	 hereWeGo
    	 boomButBust


.. code:: ipython3

    # a new scenario which will act as a base for generating the data needed for interactive dashboards
    bptk.register_scenarios(scenario_manager="smCustomerAcquisition",scenarios={
                              "interactiveScenario":{
                                  "constants":{
                                     "referrals":0,
                                      "advertisingSuccessPct":0.1,
                                      "referralFreeMonths":3,
                                      "referralProgamAdoptionPct":10
                                    }
                              }
    }
                        
    )

Another call to ``list_scenarios`` shows that the interactive scenario
has now been added:

.. code:: ipython3

    bptk.list_scenarios(["smCustomerAcquisition"])


.. parsed-literal::

    
    *** smCustomerAcquisition ***
    	 base
    	 serviceFlop
    	 rethinkAdvertising
    	 referSomeonePlease
    	 hereWeGo
    	 boomButBust
    	 interactiveScenario


Now that we have a scenario, we need to define the "What if" parameters:

.. code:: ipython3

    # for each parameter we define the range of settings - e.g. referrals ranges from 0 to twelve, with a step of one: 1,2, 3... 12.
    # advertisingSuccessPct ranges from 0 to 0.2, with a steop of 0.01: 0, 0.01, 0.02,....
    interactive_settings= {
        "advertisingSuccessPct":(0,0.2,0.01),
        "referralFreeMonths":(0,40,10),
        "referralProgramAdoptionPct":(0,12,1),
        "referrals":(0,12,1)
    }

Now we need to pre-compute all possible combinations, which is quite a
few for the ranges defined above:

.. code:: ipython3

    import numpy as np # will use the arange function to create ranges with fractional steps
    len(np.arange(0,0.2,0.01))*len(np.arange(0,40,10))*len(np.arange(0,12,1))*len(np.arange(0,12,1))




.. parsed-literal::

    11520



.. code:: ipython3

    import itertools # will use the product function to iterate through all possible combinations
    
    # generate all combinations of the settings
    dimensions = [interactive_settings[key] for key in interactive_settings]
    #now generate all possible settings
    settings = list(itertools.product(*tuple(itertools.starmap(np.arange, dimensions))))

The last line of code uses some advanved functional programming to
generates all possible combinations of the interactive parameters ...
let's take a look at what it does using just two interactive parameters:

.. code:: ipython3

    list(itertools.product(*tuple(itertools.starmap(np.arange,[(1,4,1),(4,7,1)]))))




.. parsed-literal::

    [(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)]



.. code:: ipython3

    len(settings)




.. parsed-literal::

    11520



.. code:: ipython3

    # IMPORTANT: this code takes quite some time to run (ca. 4min on my machine)
    # a variable to store the dataframes
    interactive_dfs = []
    interactive_scenario="interactiveScenario"
    interactive_equations=["customers","profit"]
    scenario = bptk.get_scenario(scenario_manager, interactive_scenario)
    # now apply the settings to the scenario
    for setting in settings:
        for setting_index, key in enumerate(interactive_settings):
            scenario.set_property_value(key, setting[setting_index])
        bptk.reset_simulation_model(
                scenario_manager=scenario_manager,
                scenario=interactive_scenario
        )
        df = bptk.plot_scenarios(
            scenario_managers=[scenario_manager],
            scenarios=[interactive_scenario],
            equations=interactive_equations,
            return_df=True
        )
        # add columns for the settings
        for setting_index, key in enumerate(interactive_settings):
            df[key] = [setting[setting_index]] * len(df.index)
        # explicitly set a time column
        df["time"] = df.index
        interactive_dfs += [df]
    # concatenate the interactive scenarios
    interactive_tab = pd.concat(interactive_dfs, ignore_index=True, sort=False)

.. code:: ipython3

    len(interactive_tab)




.. parsed-literal::

    702720



.. code:: ipython3

    11520*61 # number of scenarios * number of timesteps




.. parsed-literal::

    702720



Writing The Dataframes To An Excel File
---------------------------------------

Now that we have the dataframes containg the data, we can write them to
an Excel file using Pandas ``ExcelWriter`` function. Note that this
relies on the ``xlsxwriter`` package:

.. code:: ipython3

    import xlsxwriter
    #filename="/path/to/your/file/"
    with pd.ExcelWriter(filename) as writer:
        scenarios_tab.to_excel(writer, sheet_name="scenarios")
        interactive_tab.to_excel(writer, sheet_name="interactive")

Calling The Export Function Directly
------------------------------------

Here is how you would call the ``export_scenarios`` function directly â€“
it you don't pass a filename it returns a dictionary containing the
dataframes for both the scenarios and the interactive dashboard.

    Important: With the given parameters the export function generates
    over 11.000 interactive scenarios amounting to around 30MB of data.
    On my machine (a Macbook Pro with 16MB of RAM) the function takes
    just under four minutes to complete.

.. code:: ipython3

    %%time

    ## save the file in the current working directory
    import os
    filename= os.path.join(os.getcwd(),"customer_acquisition.xlsx")

    ## Load the BPTK Package
    bptk.export_scenarios(
        scenario_manager="smCustomerAcquisition",
        equations=["customers","profit"],
        filename=filename,
        interactive_scenario="interactiveScenario",
        interactive_equations=["customers","profit"],
        interactive_settings= {
            "advertisingSuccessPct":(0,0.2,0.01),
            "referralFreeMonths":(0,40,10),
            "referralProgramAdoptionPct":(0,12,1),
            "referrals":(0,12,1)
        }
    )

